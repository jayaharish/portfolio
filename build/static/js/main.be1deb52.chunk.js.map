{"version":3,"sources":["components/Container.js","components/SideBar.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","myProps","useSpring","from","num","div","style","transform","interpolate","angle","className","React","memo","useState","options","setOptions","useEffect","About","console","log","Education","Interests","Projects","Skills","Object","keys","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kSAyBeA,MApBf,SAAmBC,GACjB,IAAMC,EAAUC,YAAU,CACxBC,KAAM,CACJC,IAAK,IAEPA,IAAK,IAEP,OACE,kBAAC,IAASC,IAAV,CACEC,MAAO,CACLC,UAAWN,EAAQG,IAAII,aACrB,SAAAC,GAAK,gEACgDA,EADhD,YAITC,UAAU,e,aCqBDC,UAAMC,MAtCrB,SAAiBZ,GAAQ,IAAD,EACQa,mBAAS,IADjB,mBACfC,EADe,KACNC,EADM,KAuBtB,OApBAC,qBAAU,WACRD,EAAW,CACTE,MAAO,WACLC,QAAQC,IAAInB,IAEdoB,UAAW,WACTF,QAAQC,IAAInB,IAEdqB,UAAW,WACTH,QAAQC,IAAInB,IAEdsB,SAAU,WACRJ,QAAQC,IAAInB,IAEduB,OAAQ,WACNL,QAAQC,IAAInB,QAGf,IAGD,yBAAKU,UAAU,WACb,yBAAKA,UAAU,kBACZc,OAAOC,KAAKX,GAASY,KAAI,SAACC,GACzB,OACE,yBAAKA,IAAKA,EAAKjB,UAAU,iBACtBiB,W,MChBAC,MATf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.be1deb52.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nimport \"./Container.css\";\r\n\r\nfunction Container(props) {\r\n  const myProps = useSpring({\r\n    from: {\r\n      num: 30\r\n    },\r\n    num: 0\r\n  });\r\n  return (\r\n    <animated.div\r\n      style={{\r\n        transform: myProps.num.interpolate(\r\n          angle =>\r\n            `perspective(400px) translate(-50%,-50%) rotateY(${angle}deg)`\r\n        )\r\n      }}\r\n      className=\"container\"\r\n    ></animated.div>\r\n  );\r\n}\r\n\r\nexport default Container;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./SideBar.css\";\r\n\r\nfunction SideBar(props) {\r\n  const [options, setOptions] = useState({});\r\n\r\n  useEffect(() => {\r\n    setOptions({\r\n      About: () => {\r\n        console.log(props);\r\n      },\r\n      Education: () => {\r\n        console.log(props);\r\n      },\r\n      Interests: () => {\r\n        console.log(props);\r\n      },\r\n      Projects: () => {\r\n        console.log(props);\r\n      },\r\n      Skills: () => {\r\n        console.log(props);\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar-holder\">\r\n        {Object.keys(options).map((key) => {\r\n          return (\r\n            <div key={key} className=\"sidebar-items\">\r\n              {key}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(SideBar);\r\n","import React from \"react\";\r\n\r\nimport Container from \"./components/Container\";\r\nimport SideBar from \"./components/SideBar\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Container />\r\n      <SideBar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}